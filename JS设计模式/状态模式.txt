1：状态模式的关键是区分实物内部的状态，事物内部的状态的改变往往会带来事物的行为改变

2：定义：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。


4：优点：
	定义了状态和行为之间的关系，并将它们封装在一个类里，通过增加新的状态类，很容易增加新的状态和转换。
	避免Context无限膨胀，状态切换的逻辑被分布在状态类中，也去掉了Context中原本过多的条件分支
	用对象代替字符串来记录当前状态，使得状态的切换更加一目了然
	Context中的请求动作和状态类中封装的行为可以非常容易地独立变化而互不影响
	避免了写条件分支语句

5：缺点：
	会在系统中定义很多状态类

6：性能优化：
	1：管理state对象的创建和销毁
				第一种是：仅当state对象被需要时才创建并且随后销毁
				第二种是：一开始就创建好所有的状态对象，并且始终不销毁他们
				选择原则：如果state对象比较庞大，可以用第一种方式来节省内存，使一些不会用到的对象可以被及时回收
					  如果状态的改变很频繁，则选择第二种，一开始就创建好并且保存下来，因为很快就会用到他们

7：Context中的state对象是可以共享的，这是享元模式的应用


8：状态模式是解决某些需求场景的最好方法

9：在实际开发中的状态机的应用
	一个下拉菜单在hover动作下有显示、悬浮、隐藏
	一次TCP请求有建立、监听、关闭
	一个格斗游戏中人物有攻击、防御、跳跃、跌倒

10：状态模式重构代码之后，很多杂乱无章的代码会变得清晰

