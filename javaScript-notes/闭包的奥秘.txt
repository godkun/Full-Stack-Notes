1：从技术角度讲，所有的JS函数都是闭包

2：从马克思角度来说：一个函数在内部返回另一个函数。


3：书写闭包时，要注意this关键字,每个函数调用都会含有this值，所以嵌套函数里也有自己的this，就导致了闭包在外部函数里是无法访问this的，除非外部函数将
this转存为一个变量。   如 var self = this;  这叫绑定this


4：绑定arguments也是同一个道理，由于闭包具有自己所绑定的arguments，所以闭包无法直接访问外部函数的参数数组，除非外部函数将参数数组保存到另一个变量中。

var outerArguments = arguments;   然后在嵌套函数里使用它


5：为啥闭包内的this不能用呢，因为这个this和当初定义函数时的this不是同一个，即便是同一个this，this的值也会随着调用栈的变化而变化，所以闭包里所取到的this
的值是不能确定的。





6：在一个作用域链中定义两个闭包，这两个闭包共享同样的私有变量或变量。



如何理解闭包？

函数定义时的作用域链到函数执行时依然有效，外部函数中定义的局部变量在函数返回后还会存在。